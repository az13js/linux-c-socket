POSIX线程

POSIX Threads——POSIX线程，是POSIX的多线程标准，它规定了一系列的函数用于给应用程序控制同时
执行的多个工作流程，这些工作流程被称为“线程”。多线程是为了给应用程序提供更好的性能表现：
一，可以利用多个处理器核心来分摊计算工作；二，线程可以共享内存资源，减少了跨工作流程通信的
开销。

一，在程序中启动一条线程

在GNU/Linux编写POSIX线程需要包含头文件“pthread.h”，需要定义作为线程执行的代码，需要调创建
线程函数令定义的代码独立地执行起来。文件“03_hello_world.c”实现了线程创建并向屏幕打印消息的
功能。使用GCC编译文件“03_hello_world.c”需要加上“-lpthread”参数{1}，例如：

gcc 03_hello_world.c -lpthread

执行编译好的程序，屏幕分别输出两条语句：“这个是线程函数”和“主程序执行完成”。从程序的代码上可以
看出，POSIX中创建线程的函数是“pthread_create”。“pthread_create”的函数定义是：

int pthread_create(
    pthread_t                 *thread,
    const pthread_attr_t      *attr,
    void                      *(*start_routine)(void *),
    void                      *arg
);

第一个参数“thread”是类型为“pthread_t”的指针，实际上可以认为这是一个“unsigned long int”
的指针，启动线程时系统会把线程的ID{2}写入进去，所以需要传一个指针。

第二个参数“attr”也是一个指针类型的参数，它的作用是配置线程运作的一些方式，从“const”关键字可以
看出，操作系统不会修改这个参数里面的内容。在一般情况下，如果想使用默认的配置启动线程，可以传
NULL，就像文件“03_hello_world.c”中那样，其他情况下可以通过设置属性来改变线程运行的方式{3}。

设置“attr”和传给“pthread_create”函数之前，需要先用“pthread_attr_init”函数（调用成功时返
回0，失败时返回其它值）初始化结构体“pthread_attr_t”，例如文件“04_attr.c”中的用法。
“pthread.h”提供了一系列函数用于设置这个属性，也就是说不推荐直接改“attr”参数中的内容。这些设置
的函数主要以“pthread_attr_set”开头，分别是（对应存在“pthread_attr_get”开头的函数用于获取
属性值，这些函数较多且有些是非GNU标准，这里列举一部分，获取属性的函数不列出来了，具体参考官网上
对应的文档）：

pthread_attr_setdetachstate
pthread_attr_setschedpolicy
pthread_setschedparam
pthread_attr_setinheritsched
pthread_attr_setscope

最后，“pthread_attr_destroy”函数用来销毁“attr”属性。在成功销毁（返回值0代表成功，其它值是
失败）后可以重新初始化，并且创建线程后销毁不影响创建出来的线程。属性相关的函数返回值不具体列出，
详细情况参考相关的文档。

第三个参数是一个函数指针，指向作为线程执行的函数代码。从“pthread_create”的函数定义不难看出，
该函数指针指向的函数返回值是“void *”，参数的入参是“void *”，这个入参具体的内容由
“pthread_create”函数的第四个参数决定。

第四个参数是一个“void *”类型的指针，这里具体传什么内容可以自由决定，“pthread_create”会把这
个参数传给线程函数。文件“04_attr.c”中，线程的函数“thread_function”并没有使用参数“arg”，所
以在进行“pthread_create”调用时可以传“NULL”。

函数“pthread_create”成功执行时将返回0，失败的时候返回其它值。

文件“02_limit.c”中的代码尝试创建20000个线程但是会在中途创建失败而退出。操作系统设置允许创建
的线程数量是有限的，这个限制与线程栈的大小有关{4}。线程执行完成后线程栈会释放。

{1} pthread并不是Linux的内置库，所以需要用“-l”指定连接的二进制库文件。
{2} 线程ID在“pthread.h”中的线程操作函数中可以使用，关于这个ID的更多细节以后再写。
{3} 有些属性是Linux还不支持的。
{4} 栈大小是另外一个话题，我决定单独来写。

二，退出线程



